searchNodes=[{"doc":"","ref":"brod.html","title":"brod","type":"module"},{"doc":"Connect to consumer group coordinator broker.Done in steps:Connect to any of the given bootstrap ednpointsSend group_coordinator_request to resolve group coordinator endpointConnect to the resolved endpoint and return the connection pid","ref":"brod.html#connect_group_coordinator/3","title":"brod.connect_group_coordinator/3","type":"function"},{"doc":"Connect partition leader.","ref":"brod.html#connect_leader/4","title":"brod.connect_leader/4","type":"function"},{"doc":"","ref":"brod.html#consume_ack/2","title":"brod.consume_ack/2","type":"function"},{"doc":"","ref":"brod.html#consume_ack/4","title":"brod.consume_ack/4","type":"function"},{"doc":"Equivalent to create_topics(Hosts, TopicsConfigs, RequestConfigs, []).","ref":"brod.html#create_topics/3","title":"brod.create_topics/3","type":"function"},{"doc":"Create topic(s) in kafka Return the message body of create_topics, response. See kpro_schema.erl for struct details","ref":"brod.html#create_topics/4","title":"brod.create_topics/4","type":"function"},{"doc":"Equivalent to delete_topics(Hosts, Topics, Timeout, []).","ref":"brod.html#delete_topics/3","title":"brod.delete_topics/3","type":"function"},{"doc":"Delete topic(s) from kafka Return the message body of delete_topics, response. See kpro_schema.erl for struct details","ref":"brod.html#delete_topics/4","title":"brod.delete_topics/4","type":"function"},{"doc":"Describe consumer groups. The given consumer group IDs should be all managed by the coordinator-broker running at the given endpoint. Otherwise error codes will be returned in the result structs. Return describe_groups response body field named groups. See kpro_schema.erl for struct details","ref":"brod.html#describe_groups/3","title":"brod.describe_groups/3","type":"function"},{"doc":"Fetch a single message set from the given topic-partition. The first arg can either be an already established connection to leader, or {Endpoints, ConnConfig} so to establish a new connection before fetch.","ref":"brod.html#fetch/4","title":"brod.fetch/4","type":"function"},{"doc":"Fetch a single message set from the given topic-partition. The first arg can either be an already established connection to leader, or {Endpoints, ConnConfig} so to establish a new connection before fetch.","ref":"brod.html#fetch/5","title":"brod.fetch/5","type":"function"},{"doc":"","ref":"brod.html#fetch/7","title":"brod.fetch/7","type":"function"},{"doc":"","ref":"brod.html#fetch/8","title":"brod.fetch/8","type":"function"},{"doc":"Same as fetch_committed_offsets/3, but works with a started brod_client","ref":"brod.html#fetch_committed_offsets/2","title":"brod.fetch_committed_offsets/2","type":"function"},{"doc":"Fetch committed offsets for ALL topics in the given consumer group. Return the responses field of the offset_fetch response. See kpro_schema.erl for struct details.","ref":"brod.html#fetch_committed_offsets/3","title":"brod.fetch_committed_offsets/3","type":"function"},{"doc":"Fold through messages in a partition. Works like lists:foldl/2 but with below stop conditions: * Always return after reach high watermark offset * Return after the given message count limit is reached * Return after the given kafka offset is reached. * Return if the FoldFun returns an {error, Reason} tuple. NOTE: Exceptions from evaluating FoldFun are not caught.","ref":"brod.html#fold/8","title":"brod.fold/8","type":"function"},{"doc":"","ref":"brod.html#get_consumer/3","title":"brod.get_consumer/3","type":"function"},{"doc":"Fetch broker metadata Return the message body of metadata response. See kpro_schema.erl for details","ref":"brod.html#get_metadata/1","title":"brod.get_metadata/1","type":"function"},{"doc":"Fetch broker/topic metadata Return the message body of metadata response. See kpro_schema.erl for struct details","ref":"brod.html#get_metadata/2","title":"brod.get_metadata/2","type":"function"},{"doc":"Fetch broker/topic metadata Return the message body of metadata response. See kpro_schema.erl for struct details","ref":"brod.html#get_metadata/3","title":"brod.get_metadata/3","type":"function"},{"doc":"Get number of partitions for a given topic. The higher level producers may need the partition numbers to find the partition producer pid --- if the number of partitions is not statically configured for them. It is up to the callers how they want to distribute their data (e.g. random, roundrobin or consistent-hashing) to the partitions.","ref":"brod.html#get_partitions_count/2","title":"brod.get_partitions_count/2","type":"function"},{"doc":"Equivalent to brod_client:get_producer / 3.","ref":"brod.html#get_producer/3","title":"brod.get_producer/3","type":"function"},{"doc":"List ALL consumer groups in the given kafka cluster. NOTE: Exception if failed to connect any of the coordinator brokers.","ref":"brod.html#list_all_groups/2","title":"brod.list_all_groups/2","type":"function"},{"doc":"List consumer groups in the given group coordinator broker.","ref":"brod.html#list_groups/2","title":"brod.list_groups/2","type":"function"},{"doc":"Equivalent to produce(Pid, 0, &lt;&lt;&gt;&gt;, Value).","ref":"brod.html#produce/2","title":"brod.produce/2","type":"function"},{"doc":"Produce one message if Value is a binary or an iolist. Otherwise send a batch, if Value is a (nested) key-value list, or a list of maps. In this case Key is discarded (only the keys in the key-value list are sent to Kafka). The pid should be a partition producer pid, NOT client pid. The return value is a call reference of type call_ref(), so the caller can use it to expect (match) a #brod_produce_reply{result = brod_produce_req_acked} message after the produce request has been acked by Kafka.","ref":"brod.html#produce/3","title":"brod.produce/3","type":"function"},{"doc":"Produce one message if Value is a binary or an iolist. Otherwise send a batch if Value is a (nested) key-value list, or a list of maps. In this case Key is used only for partitioning, or discarded if the 3rd argument is a partition number instead of a partitioner callback. This function first looks up the producer pid, then calls produce/3 to do the real work. The return value is a call reference of type call_ref(), so the caller can used it to expect (match) a #brod_produce_reply{result = brod_produce_req_acked} message after the produce request has been acked by Kafka.","ref":"brod.html#produce/5","title":"brod.produce/5","type":"function"},{"doc":"Same as produce/3, only the ack is not delivered as a message, instead, the callback is evaluated by producer worker when ack is received from kafka.","ref":"brod.html#produce_cb/4","title":"brod.produce_cb/4","type":"function"},{"doc":"Same as produce/5 only the ack is not delivered as a message, instead, the callback is evaluated by producer worker when ack is received from kafka. Return the partition to caller as {ok, Partition} for caller to correlate the callback when the 3rd arg is not a partition number.","ref":"brod.html#produce_cb/6","title":"brod.produce_cb/6","type":"function"},{"doc":"Send the message to partition worker without any ack. NOTE: This call has no back-pressure to the caller, excessive usage may cause BEAM to run out of memory.","ref":"brod.html#produce_no_ack/3","title":"brod.produce_no_ack/3","type":"function"},{"doc":"Find the partition worker and send message without any ack. NOTE: This call has no back-pressure to the caller, excessive usage may cause BEAM to run out of memory.","ref":"brod.html#produce_no_ack/5","title":"brod.produce_no_ack/5","type":"function"},{"doc":"Equivalent to produce_sync(Pid, 0, &lt;&lt;&gt;&gt;, Value).Same as produce/5 only the ack is not d","ref":"brod.html#produce_sync/2","title":"brod.produce_sync/2","type":"function"},{"doc":"Sync version of produce/3This function will not return until the response is received from Kafka. But when producer is started with required_acks set to 0, this function will return once the messages are buffered in the producer process.","ref":"brod.html#produce_sync/3","title":"brod.produce_sync/3","type":"function"},{"doc":"Sync version of produce/5 This function will not return until a response is received from kafka, however if producer is started with required_acks set to 0, this function will return once the messages are buffered in the producer process.","ref":"brod.html#produce_sync/5","title":"brod.produce_sync/5","type":"function"},{"doc":"Version of produce_sync/5 that returns the offset assigned by Kafka If producer is started with required_acks set to 0, the offset will be ?BROD_PRODUCE_UNKNOWN_OFFSET.","ref":"brod.html#produce_sync_offset/5","title":"brod.produce_sync_offset/5","type":"function"},{"doc":"Equivalent to resolve_offset(Hosts, Topic, Partition, latest, 1).","ref":"brod.html#resolve_offset/3","title":"brod.resolve_offset/3","type":"function"},{"doc":"Resolve semantic offset or timestamp to real offset.","ref":"brod.html#resolve_offset/4","title":"brod.resolve_offset/4","type":"function"},{"doc":"Resolve semantic offset or timestamp to real offset.","ref":"brod.html#resolve_offset/5","title":"brod.resolve_offset/5","type":"function"},{"doc":"Resolve semantic offset or timestamp to real offset.","ref":"brod.html#resolve_offset/6","title":"brod.resolve_offset/6","type":"function"},{"doc":"Start brod application.","ref":"brod.html#start/0","title":"brod.start/0","type":"function"},{"doc":"Application behaviour callback","ref":"brod.html#start/2","title":"brod.start/2","type":"function"},{"doc":"Equivalent to start_client(BootstrapEndpoints, brod_default_client).","ref":"brod.html#start_client/1","title":"brod.start_client/1","type":"function"},{"doc":"Equivalent to start_client(BootstrapEndpoints, ClientId, []).","ref":"brod.html#start_client/2","title":"brod.start_client/2","type":"function"},{"doc":"Start a client.BootstrapEndpoints: Kafka cluster endpoints, can be any of the brokers in the cluster, which does not necessarily have to be the leader of any partition, e.g. a load-balanced entrypoint to the remote Kafka cluster.ClientId: Atom to identify the client process.Config is a proplist, possible values:restart_delay_seconds (optional, default=10)How long to wait between attempts to restart brod_client process when it crashes.get_metadata_timeout_seconds (optional, default=5)Return {error, timeout} from brod_client:get_xxx calls if responses for APIs such as metadata, find_coordinator are not received in time.reconnect_cool_down_seconds (optional, default=1)Delay this configured number of seconds before retrying to estabilish a new connection to the kafka partition leader.allow_topic_auto_creation (optional, default=true)By default, brod respects what is configured in the broker about topic auto-creation. i.e. whether auto.create.topics.enable is set in the broker configuration. However if allow_topic_auto_creation is set to false in client config, brod will avoid sending metadata requests that may cause an auto-creation of the topic regardless of what broker config is.auto_start_producers (optional, default=false)If true, brod client will spawn a producer automatically when user is trying to call produce but did not call brod:start_producer explicitly. Can be useful for applications which don't know beforehand which topics they will be working with.default_producer_config (optional, default=[])Producer configuration to use when auto_start_producers is true. See brod_producer:start_link/4 for details about producer configConnection options can be added to the same proplist. See kpro_connection.erl in kafka_protocol for the details:ssl (optional, default=false)true | false | ssl:ssl_option()true is translated to [] as ssl:ssl_option() i.e. all default.sasl (optional, default=undefined)Credentials for SASL/Plain authentication. {mechanism(), Filename} or {mechanism(), UserName, Password} where mechanism can be atoms: plain (for &quot;PLAIN&quot;), scram_sha_256 (for &quot;SCRAM-SHA-256&quot;) or scram_sha_512 (for SCRAM-SHA-512). Filename should be a file consisting two lines, first line is the username and the second line is the password. Both Username and Password should be string() | binary()connect_timeout (optional, default=5000)Timeout when trying to connect to an endpoint.request_timeout (optional, default=240000, constraint: &gt;= 1000)Timeout when waiting for a response, connection restart when timed out.query_api_versions (optional, default=true)Must be set to false to work with kafka versions prior to 0.10, When set to true, at connection start, brod will send a query request to get the broker supported API version ranges. When set to 'false', brod will alway use the lowest supported API version when sending requests to kafka. Supported API version ranges can be found in: brod_kafka_apis:supported_versions/1extra_sock_opts (optional, default=[])Extra socket options to tune socket performance. e.g. [{sndbuf, 1 bsl 20}]. More info","ref":"brod.html#start_client/3","title":"brod.start_client/3","type":"function"},{"doc":"Dynamically start a topic consumer.See also: for details about consumer config..","ref":"brod.html#start_consumer/3","title":"brod.start_consumer/3","type":"function"},{"doc":"Equivalent to start_link_client(BootstrapEndpoints, brod_default_client).","ref":"brod.html#start_link_client/1","title":"brod.start_link_client/1","type":"function"},{"doc":"Equivalent to start_link_client(BootstrapEndpoints, ClientId, []).","ref":"brod.html#start_link_client/2","title":"brod.start_link_client/2","type":"function"},{"doc":"","ref":"brod.html#start_link_client/3","title":"brod.start_link_client/3","type":"function"},{"doc":"See also: brod_group_subscriber:start_link/7.","ref":"brod.html#start_link_group_subscriber/7","title":"brod.start_link_group_subscriber/7","type":"function"},{"doc":"See also: brod_group_subscriber:start_link/8.","ref":"brod.html#start_link_group_subscriber/8","title":"brod.start_link_group_subscriber/8","type":"function"},{"doc":"Start group_subscriber_v2","ref":"brod.html#start_link_group_subscriber_v2/1","title":"brod.start_link_group_subscriber_v2/1","type":"function"},{"doc":"See also: brod_topic_subscriber:start_link/1.","ref":"brod.html#start_link_topic_subscriber/1","title":"brod.start_link_topic_subscriber/1","type":"function"},{"doc":"Equivalent to start_link_topic_subscriber(Client, Topic, all, ConsumerConfig, CbModule, CbInitArg).","ref":"brod.html#start_link_topic_subscriber/5","title":"brod.start_link_topic_subscriber/5","type":"function"},{"doc":"Equivalent to start_link_topic_subscriber(Client, Topic, Partitions, ConsumerConfig, message, CbModule, CbInitArg).","ref":"brod.html#start_link_topic_subscriber/6","title":"brod.start_link_topic_subscriber/6","type":"function"},{"doc":"See also: brod_topic_subscriber:start_link/7.","ref":"brod.html#start_link_topic_subscriber/7","title":"brod.start_link_topic_subscriber/7","type":"function"},{"doc":"Dynamically start a per-topic producer.See also: brod_producer:start_link/4.","ref":"brod.html#start_producer/3","title":"brod.start_producer/3","type":"function"},{"doc":"Stop brod application.","ref":"brod.html#stop/0","title":"brod.stop/0","type":"function"},{"doc":"Application behaviour callback","ref":"brod.html#stop/1","title":"brod.stop/1","type":"function"},{"doc":"Stop a client.","ref":"brod.html#stop_client/1","title":"brod.stop_client/1","type":"function"},{"doc":"","ref":"brod.html#subscribe/3","title":"brod.subscribe/3","type":"function"},{"doc":"Subscribe to a data stream from the given topic-partition.If {error, Reason} is returned, the caller should perhaps retry later.{ok, ConsumerPid} is returned on success. The caller may want to monitor the consumer pid and re-subscribe should the ConsumerPid crash.Upon successful subscription the subscriber process should expect messages of pattern: {ConsumerPid, #kafka_message_set{}} and {ConsumerPid, #kafka_fetch_error{}}.-include_lib(&quot;brod/include/brod.hrl&quot;) to access the records.In case #kafka_fetch_error{} is received the subscriber should re-subscribe itself to resume the data stream.","ref":"brod.html#subscribe/5","title":"brod.subscribe/5","type":"function"},{"doc":"Block wait for sent produced request to be acked by kafka.","ref":"brod.html#sync_produce_request/1","title":"brod.sync_produce_request/1","type":"function"},{"doc":"","ref":"brod.html#sync_produce_request/2","title":"brod.sync_produce_request/2","type":"function"},{"doc":"As sync_produce_request_offset/1, but also returning assigned offset See produce_sync_offset/5.","ref":"brod.html#sync_produce_request_offset/1","title":"brod.sync_produce_request_offset/1","type":"function"},{"doc":"","ref":"brod.html#sync_produce_request_offset/2","title":"brod.sync_produce_request_offset/2","type":"function"},{"doc":"Unsubscribe the current subscriber. Assuming the subscriber is self().","ref":"brod.html#unsubscribe/1","title":"brod.unsubscribe/1","type":"function"},{"doc":"Unsubscribe the current subscriber.","ref":"brod.html#unsubscribe/2","title":"brod.unsubscribe/2","type":"function"},{"doc":"Unsubscribe the current subscriber. Assuming the subscriber is self().","ref":"brod.html#unsubscribe/3","title":"brod.unsubscribe/3","type":"function"},{"doc":"Unsubscribe the current subscriber.","ref":"brod.html#unsubscribe/4","title":"brod.unsubscribe/4","type":"function"},{"doc":"","ref":"brod.html#t:batch_input/0","title":"brod.batch_input/0","type":"type"},{"doc":"","ref":"brod.html#t:bootstrap/0","title":"brod.bootstrap/0","type":"type"},{"doc":"","ref":"brod.html#t:call_ref/0","title":"brod.call_ref/0","type":"type"},{"doc":"","ref":"brod.html#t:cg/0","title":"brod.cg/0","type":"type"},{"doc":"","ref":"brod.html#t:cg_protocol_type/0","title":"brod.cg_protocol_type/0","type":"type"},{"doc":"","ref":"brod.html#t:client/0","title":"brod.client/0","type":"type"},{"doc":"","ref":"brod.html#t:client_config/0","title":"brod.client_config/0","type":"type"},{"doc":"","ref":"brod.html#t:client_id/0","title":"brod.client_id/0","type":"type"},{"doc":"","ref":"brod.html#t:compression/0","title":"brod.compression/0","type":"type"},{"doc":"","ref":"brod.html#t:conn_config/0","title":"brod.conn_config/0","type":"type"},{"doc":"","ref":"brod.html#t:connection/0","title":"brod.connection/0","type":"type"},{"doc":"","ref":"brod.html#t:consumer_config/0","title":"brod.consumer_config/0","type":"type"},{"doc":"","ref":"brod.html#t:consumer_option/0","title":"brod.consumer_option/0","type":"type"},{"doc":"","ref":"brod.html#t:consumer_options/0","title":"brod.consumer_options/0","type":"type"},{"doc":"","ref":"brod.html#t:endpoint/0","title":"brod.endpoint/0","type":"type"},{"doc":"","ref":"brod.html#t:error_code/0","title":"brod.error_code/0","type":"type"},{"doc":"","ref":"brod.html#t:fetch_opts/0","title":"brod.fetch_opts/0","type":"type"},{"doc":"","ref":"brod.html#t:fold_acc/0","title":"brod.fold_acc/0","type":"type"},{"doc":"fold always returns when reaches the high watermark offset. fold also returns when any of the limits is hit.","ref":"brod.html#t:fold_fun/1","title":"brod.fold_fun/1","type":"type"},{"doc":"","ref":"brod.html#t:fold_limits/0","title":"brod.fold_limits/0","type":"type"},{"doc":"","ref":"brod.html#t:fold_result/0","title":"brod.fold_result/0","type":"type"},{"doc":"OffsetToContinue: begin offset for the next fold call","ref":"brod.html#t:fold_stop_reason/0","title":"brod.fold_stop_reason/0","type":"type"},{"doc":"","ref":"brod.html#t:group_config/0","title":"brod.group_config/0","type":"type"},{"doc":"","ref":"brod.html#t:group_generation_id/0","title":"brod.group_generation_id/0","type":"type"},{"doc":"","ref":"brod.html#t:group_id/0","title":"brod.group_id/0","type":"type"},{"doc":"","ref":"brod.html#t:group_member/0","title":"brod.group_member/0","type":"type"},{"doc":"","ref":"brod.html#t:group_member_id/0","title":"brod.group_member_id/0","type":"type"},{"doc":"","ref":"brod.html#t:hostname/0","title":"brod.hostname/0","type":"type"},{"doc":"","ref":"brod.html#t:key/0","title":"brod.key/0","type":"type"},{"doc":"","ref":"brod.html#t:message/0","title":"brod.message/0","type":"type"},{"doc":"","ref":"brod.html#t:message_set/0","title":"brod.message_set/0","type":"type"},{"doc":"","ref":"brod.html#t:msg_input/0","title":"brod.msg_input/0","type":"type"},{"doc":"","ref":"brod.html#t:msg_ts/0","title":"brod.msg_ts/0","type":"type"},{"doc":"","ref":"brod.html#t:offset/0","title":"brod.offset/0","type":"type"},{"doc":"","ref":"brod.html#t:offset_time/0","title":"brod.offset_time/0","type":"type"},{"doc":"","ref":"brod.html#t:partition/0","title":"brod.partition/0","type":"type"},{"doc":"","ref":"brod.html#t:partition_assignment/0","title":"brod.partition_assignment/0","type":"type"},{"doc":"","ref":"brod.html#t:partition_fun/0","title":"brod.partition_fun/0","type":"type"},{"doc":"","ref":"brod.html#t:partitioner/0","title":"brod.partitioner/0","type":"type"},{"doc":"","ref":"brod.html#t:portnum/0","title":"brod.portnum/0","type":"type"},{"doc":"","ref":"brod.html#t:produce_ack_cb/0","title":"brod.produce_ack_cb/0","type":"type"},{"doc":"","ref":"brod.html#t:produce_reply/0","title":"brod.produce_reply/0","type":"type"},{"doc":"","ref":"brod.html#t:produce_result/0","title":"brod.produce_result/0","type":"type"},{"doc":"","ref":"brod.html#t:producer_config/0","title":"brod.producer_config/0","type":"type"},{"doc":"","ref":"brod.html#t:received_assignments/0","title":"brod.received_assignments/0","type":"type"},{"doc":"","ref":"brod.html#t:topic/0","title":"brod.topic/0","type":"type"},{"doc":"","ref":"brod.html#t:topic_config/0","title":"brod.topic_config/0","type":"type"},{"doc":"","ref":"brod.html#t:topic_partition/0","title":"brod.topic_partition/0","type":"type"},{"doc":"","ref":"brod.html#t:value/0","title":"brod.value/0","type":"type"},{"doc":"This is a utility module to help force commit offsets to kafka.","ref":"brod_cg_commits.html","title":"brod_cg_commits","type":"module"},{"doc":"","ref":"brod_cg_commits.html#assign_all_to_self/2","title":"brod_cg_commits.assign_all_to_self/2","type":"function"},{"doc":"This function is called only when partition_assignment_strategy is set for callback_implemented in group config.","ref":"brod_cg_commits.html#assign_partitions/3","title":"brod_cg_commits.assign_partitions/3","type":"function"},{"doc":"Called by group coordinator when there is new assignemnt received.","ref":"brod_cg_commits.html#assignments_received/4","title":"brod_cg_commits.assignments_received/4","type":"function"},{"doc":"Called by group coordinator before re-joinning the consumer group.","ref":"brod_cg_commits.html#assignments_revoked/1","title":"brod_cg_commits.assignments_revoked/1","type":"function"},{"doc":"Callback implementation for :gen_server.code_change/3.","ref":"brod_cg_commits.html#code_change/3","title":"brod_cg_commits.code_change/3","type":"function"},{"doc":"Called by group coordinator when initializing the assignments for subscriber. NOTE: this function is called only when it is DISABLED to commit offsets to kafka. i.e. offset_commit_policy is set to consumer_managed","ref":"brod_cg_commits.html#get_committed_offsets/2","title":"brod_cg_commits.get_committed_offsets/2","type":"function"},{"doc":"Callback implementation for :gen_server.handle_call/3.","ref":"brod_cg_commits.html#handle_call/3","title":"brod_cg_commits.handle_call/3","type":"function"},{"doc":"Callback implementation for :gen_server.handle_cast/2.","ref":"brod_cg_commits.html#handle_cast/2","title":"brod_cg_commits.handle_cast/2","type":"function"},{"doc":"Callback implementation for :gen_server.handle_info/2.","ref":"brod_cg_commits.html#handle_info/2","title":"brod_cg_commits.handle_info/2","type":"function"},{"doc":"Callback implementation for :gen_server.init/1.","ref":"brod_cg_commits.html#init/1","title":"brod_cg_commits.init/1","type":"function"},{"doc":"","ref":"brod_cg_commits.html#log/4","title":"brod_cg_commits.log/4","type":"function"},{"doc":"","ref":"brod_cg_commits.html#maybe_reply_sync/1","title":"brod_cg_commits.maybe_reply_sync/1","type":"function"},{"doc":"Force commit offsets.","ref":"brod_cg_commits.html#run/2","title":"brod_cg_commits.run/2","type":"function"},{"doc":"","ref":"brod_cg_commits.html#set_done/1","title":"brod_cg_commits.set_done/1","type":"function"},{"doc":"Start (link) a group member. The member will try to join the consumer group and get assignments for the given topic-partitions, then commit given offsets to kafka. In case not all given partitions are assigned to it, it will terminate with an exit exception","ref":"brod_cg_commits.html#start_link/2","title":"brod_cg_commits.start_link/2","type":"function"},{"doc":"Stop the process.","ref":"brod_cg_commits.html#stop/1","title":"brod_cg_commits.stop/1","type":"function"},{"doc":"Make a call to the resetter process, the call will be blocked until offsets are committed.","ref":"brod_cg_commits.html#sync/1","title":"brod_cg_commits.sync/1","type":"function"},{"doc":"Callback implementation for :gen_server.terminate/2.","ref":"brod_cg_commits.html#terminate/2","title":"brod_cg_commits.terminate/2","type":"function"},{"doc":"","ref":"brod_cg_commits.html#t:group_id/0","title":"brod_cg_commits.group_id/0","type":"type"},{"doc":"","ref":"brod_cg_commits.html#t:group_input/0","title":"brod_cg_commits.group_input/0","type":"type"},{"doc":"","ref":"brod_cg_commits.html#t:member_id/0","title":"brod_cg_commits.member_id/0","type":"type"},{"doc":"","ref":"brod_cg_commits.html#t:offset/0","title":"brod_cg_commits.offset/0","type":"type"},{"doc":"","ref":"brod_cg_commits.html#t:offsets/0","title":"brod_cg_commits.offsets/0","type":"type"},{"doc":"","ref":"brod_cg_commits.html#t:partition/0","title":"brod_cg_commits.partition/0","type":"type"},{"doc":"","ref":"brod_cg_commits.html#t:prop_key/0","title":"brod_cg_commits.prop_key/0","type":"type"},{"doc":"","ref":"brod_cg_commits.html#t:prop_val/0","title":"brod_cg_commits.prop_val/0","type":"type"},{"doc":"-1 to use whatever configured in kafka","ref":"brod_cg_commits.html#t:retention/0","title":"brod_cg_commits.retention/0","type":"type"},{"doc":"","ref":"brod_cg_commits.html#t:topic/0","title":"brod_cg_commits.topic/0","type":"type"},{"doc":"","ref":"brod_client.html","title":"brod_client","type":"module"},{"doc":"","ref":"brod_client.html#config/3","title":"brod_client.config/3","type":"function"},{"doc":"","ref":"brod_client.html#conn_config/1","title":"brod_client.conn_config/1","type":"function"},{"doc":"","ref":"brod_client.html#conn_config/3","title":"brod_client.conn_config/3","type":"function"},{"doc":"","ref":"brod_client.html#connect/2","title":"brod_client.connect/2","type":"function"},{"doc":"De-register the consumer for a partition. The partition consumer entry is deleted from the ETS table to allow cleanup of purposefully stopped consumers and allow later restart.","ref":"brod_client.html#deregister_consumer/3","title":"brod_client.deregister_consumer/3","type":"function"},{"doc":"De-register the producer for a partition. The partition producer entry is deleted from the ETS table to allow cleanup of purposefully stopped producers and allow later restart.","ref":"brod_client.html#deregister_producer/3","title":"brod_client.deregister_producer/3","type":"function"},{"doc":"","ref":"brod_client.html#do_connect/2","title":"brod_client.do_connect/2","type":"function"},{"doc":"","ref":"brod_client.html#do_get_group_coordinator/2","title":"brod_client.do_get_group_coordinator/2","type":"function"},{"doc":"","ref":"brod_client.html#do_get_leader_connection/3","title":"brod_client.do_get_leader_connection/3","type":"function"},{"doc":"","ref":"brod_client.html#do_get_metadata/2","title":"brod_client.do_get_metadata/2","type":"function"},{"doc":"","ref":"brod_client.html#do_get_partitions_count/1","title":"brod_client.do_get_partitions_count/1","type":"function"},{"doc":"","ref":"brod_client.html#do_start_consumer/3","title":"brod_client.do_start_consumer/3","type":"function"},{"doc":"","ref":"brod_client.html#do_start_producer/3","title":"brod_client.do_start_producer/3","type":"function"},{"doc":"","ref":"brod_client.html#ensure_binary/1","title":"brod_client.ensure_binary/1","type":"function"},{"doc":"","ref":"brod_client.html#ensure_metadata_connection/1","title":"brod_client.ensure_metadata_connection/1","type":"function"},{"doc":"","ref":"brod_client.html#ensure_partition_workers/3","title":"brod_client.ensure_partition_workers/3","type":"function"},{"doc":"","ref":"brod_client.html#find_conn/2","title":"brod_client.find_conn/2","type":"function"},{"doc":"","ref":"brod_client.html#find_consumer/3","title":"brod_client.find_consumer/3","type":"function"},{"doc":"","ref":"brod_client.html#find_partition_worker/2","title":"brod_client.find_partition_worker/2","type":"function"},{"doc":"","ref":"brod_client.html#find_producer/3","title":"brod_client.find_producer/3","type":"function"},{"doc":"Get connection to a kafka broker. Return already established connection towards the broker, otherwise a new one is established and cached in client state. If the old connection was dead less than a configurable N seconds ago, {error, LastReason} is returned.","ref":"brod_client.html#get_connection/3","title":"brod_client.get_connection/3","type":"function"},{"doc":"Get consumer of the given topic-parition.","ref":"brod_client.html#get_consumer/3","title":"brod_client.get_consumer/3","type":"function"},{"doc":"Get broker endpoint and connection config for connecting a group coordinator.","ref":"brod_client.html#get_group_coordinator/2","title":"brod_client.get_group_coordinator/2","type":"function"},{"doc":"Get the connection to kafka broker which is a leader for given Topic-Partition. Return already established connection towards the leader broker, Otherwise a new one is established and cached in client state. If the old connection was dead less than a configurable N seconds ago, {error, LastReason} is returned.","ref":"brod_client.html#get_leader_connection/3","title":"brod_client.get_leader_connection/3","type":"function"},{"doc":"Get topic metadata, if topic is undefined, will fetch ALL metadata.","ref":"brod_client.html#get_metadata/2","title":"brod_client.get_metadata/2","type":"function"},{"doc":"","ref":"brod_client.html#get_metadata_connection/1","title":"brod_client.get_metadata_connection/1","type":"function"},{"doc":"","ref":"brod_client.html#get_metadata_safe/2","title":"brod_client.get_metadata_safe/2","type":"function"},{"doc":"","ref":"brod_client.html#get_partition_worker/2","title":"brod_client.get_partition_worker/2","type":"function"},{"doc":"Get number of partitions for a given topic.","ref":"brod_client.html#get_partitions_count/2","title":"brod_client.get_partitions_count/2","type":"function"},{"doc":"","ref":"brod_client.html#get_partitions_count/3","title":"brod_client.get_partitions_count/3","type":"function"},{"doc":"Get producer of the given topic-partition. The producer is started if auto_start_producers is enabled in client config.","ref":"brod_client.html#get_producer/3","title":"brod_client.get_producer/3","type":"function"},{"doc":"","ref":"brod_client.html#handle_connection_down/3","title":"brod_client.handle_connection_down/3","type":"function"},{"doc":"","ref":"brod_client.html#is_cooled_down/2","title":"brod_client.is_cooled_down/2","type":"function"},{"doc":"","ref":"brod_client.html#kf/2","title":"brod_client.kf/2","type":"function"},{"doc":"","ref":"brod_client.html#lookup_partition_worker/3","title":"brod_client.lookup_partition_worker/3","type":"function"},{"doc":"","ref":"brod_client.html#lookup_partitions_count_cache/2","title":"brod_client.lookup_partitions_count_cache/2","type":"function"},{"doc":"","ref":"brod_client.html#mark_dead/1","title":"brod_client.mark_dead/1","type":"function"},{"doc":"","ref":"brod_client.html#maybe_connect/2","title":"brod_client.maybe_connect/2","type":"function"},{"doc":"","ref":"brod_client.html#maybe_connect/3","title":"brod_client.maybe_connect/3","type":"function"},{"doc":"","ref":"brod_client.html#maybe_start_producer/4","title":"brod_client.maybe_start_producer/4","type":"function"},{"doc":"Register self() as a partition consumer. The pid is registered in an ETS table, then the callers may lookup a consumer pid from the table ane make subscribe calls to the process directly.","ref":"brod_client.html#register_consumer/3","title":"brod_client.register_consumer/3","type":"function"},{"doc":"Register self() as a partition producer. The pid is registered in an ETS table, then the callers may lookup a producer pid from the table and make produce requests to the producer process directly.","ref":"brod_client.html#register_producer/3","title":"brod_client.register_producer/3","type":"function"},{"doc":"","ref":"brod_client.html#request_sync/2","title":"brod_client.request_sync/2","type":"function"},{"doc":"","ref":"brod_client.html#safe_gen_call/3","title":"brod_client.safe_gen_call/3","type":"function"},{"doc":"","ref":"brod_client.html#shutdown_pid/1","title":"brod_client.shutdown_pid/1","type":"function"},{"doc":"Dynamically start a topic consumer. Returns ok if the consumer is already started.","ref":"brod_client.html#start_consumer/3","title":"brod_client.start_consumer/3","type":"function"},{"doc":"","ref":"brod_client.html#start_link/3","title":"brod_client.start_link/3","type":"function"},{"doc":"Dynamically start a per-topic producer. Return ok if the producer is already started.","ref":"brod_client.html#start_producer/3","title":"brod_client.start_producer/3","type":"function"},{"doc":"","ref":"brod_client.html#stop/1","title":"brod_client.stop/1","type":"function"},{"doc":"Stop all partition consumers of the given topic.","ref":"brod_client.html#stop_consumer/2","title":"brod_client.stop_consumer/2","type":"function"},{"doc":"Stop all partition producers of the given topic.","ref":"brod_client.html#stop_producer/2","title":"brod_client.stop_producer/2","type":"function"},{"doc":"","ref":"brod_client.html#timeout/1","title":"brod_client.timeout/1","type":"function"},{"doc":"","ref":"brod_client.html#update_partitions_count_cache/2","title":"brod_client.update_partitions_count_cache/2","type":"function"},{"doc":"","ref":"brod_client.html#validate_topic_existence/3","title":"brod_client.validate_topic_existence/3","type":"function"},{"doc":"","ref":"brod_client.html#with_ok/2","title":"brod_client.with_ok/2","type":"function"},{"doc":"","ref":"brod_client.html#t:client/0","title":"brod_client.client/0","type":"type"},{"doc":"","ref":"brod_client.html#t:client_id/0","title":"brod_client.client_id/0","type":"type"},{"doc":"","ref":"brod_client.html#t:config/0","title":"brod_client.config/0","type":"type"},{"doc":"","ref":"brod_client.html#t:conn_state/0","title":"brod_client.conn_state/0","type":"type"},{"doc":"","ref":"brod_client.html#t:connection/0","title":"brod_client.connection/0","type":"type"},{"doc":"","ref":"brod_client.html#t:dead_conn/0","title":"brod_client.dead_conn/0","type":"type"},{"doc":"","ref":"brod_client.html#t:endpoint/0","title":"brod_client.endpoint/0","type":"type"},{"doc":"","ref":"brod_client.html#t:get_consumer_error/0","title":"brod_client.get_consumer_error/0","type":"type"},{"doc":"","ref":"brod_client.html#t:get_producer_error/0","title":"brod_client.get_producer_error/0","type":"type"},{"doc":"","ref":"brod_client.html#t:get_worker_error/0","title":"brod_client.get_worker_error/0","type":"type"},{"doc":"","ref":"brod_client.html#t:group_id/0","title":"brod_client.group_id/0","type":"type"},{"doc":"","ref":"brod_client.html#t:partition/0","title":"brod_client.partition/0","type":"type"},{"doc":"","ref":"brod_client.html#t:partition_worker_key/0","title":"brod_client.partition_worker_key/0","type":"type"},{"doc":"","ref":"brod_client.html#t:state/0","title":"brod_client.state/0","type":"type"},{"doc":"","ref":"brod_client.html#t:topic/0","title":"brod_client.topic/0","type":"type"},{"doc":"","ref":"brod_consumer.html","title":"brod_consumer","type":"module"},{"doc":"Subscriber confirms that a message (identified by offset) has been consumed, consumer process now may continue to fetch more messages.","ref":"brod_consumer.html#ack/2","title":"brod_consumer.ack/2","type":"function"},{"doc":"","ref":"brod_consumer.html#add_pending_ack/2","title":"brod_consumer.add_pending_ack/2","type":"function"},{"doc":"","ref":"brod_consumer.html#add_pending_acks/2","title":"brod_consumer.add_pending_acks/2","type":"function"},{"doc":"","ref":"brod_consumer.html#cast_to_subscriber/2","title":"brod_consumer.cast_to_subscriber/2","type":"function"},{"doc":"","ref":"brod_consumer.html#connect_leader/3","title":"brod_consumer.connect_leader/3","type":"function"},{"doc":"Enable/disable debugging on the consumer process.debug(Pid, print) prints debug info to stdout.debug(Pid, File) prints debug info to a file File.","ref":"brod_consumer.html#debug/2","title":"brod_consumer.debug/2","type":"function"},{"doc":"","ref":"brod_consumer.html#do_debug/2","title":"brod_consumer.do_debug/2","type":"function"},{"doc":"","ref":"brod_consumer.html#err_op/1","title":"brod_consumer.err_op/1","type":"function"},{"doc":"Get connection pid. Test/debug only.","ref":"brod_consumer.html#get_connection/1","title":"brod_consumer.get_connection/1","type":"function"},{"doc":"","ref":"brod_consumer.html#handle_ack/2","title":"brod_consumer.handle_ack/2","type":"function"},{"doc":"","ref":"brod_consumer.html#handle_batches/3","title":"brod_consumer.handle_batches/3","type":"function"},{"doc":"","ref":"brod_consumer.html#handle_conn_down/1","title":"brod_consumer.handle_conn_down/1","type":"function"},{"doc":"","ref":"brod_consumer.html#handle_fetch_error/2","title":"brod_consumer.handle_fetch_error/2","type":"function"},{"doc":"","ref":"brod_consumer.html#handle_fetch_response/2","title":"brod_consumer.handle_fetch_response/2","type":"function"},{"doc":"","ref":"brod_consumer.html#handle_reset_offset/2","title":"brod_consumer.handle_reset_offset/2","type":"function"},{"doc":"","ref":"brod_consumer.html#handle_subscribe_call/3","title":"brod_consumer.handle_subscribe_call/3","type":"function"},{"doc":"Callback implementation for :gen_server.init/1.","ref":"brod_consumer.html#init/1","title":"brod_consumer.init/1","type":"function"},{"doc":"","ref":"brod_consumer.html#is_shared_conn/1","title":"brod_consumer.is_shared_conn/1","type":"function"},{"doc":"","ref":"brod_consumer.html#maybe_delay_fetch_request/1","title":"brod_consumer.maybe_delay_fetch_request/1","type":"function"},{"doc":"","ref":"brod_consumer.html#maybe_init_connection/1","title":"brod_consumer.maybe_init_connection/1","type":"function"},{"doc":"","ref":"brod_consumer.html#maybe_send_fetch_request/1","title":"brod_consumer.maybe_send_fetch_request/1","type":"function"},{"doc":"","ref":"brod_consumer.html#maybe_send_init_connection/1","title":"brod_consumer.maybe_send_init_connection/1","type":"function"},{"doc":"","ref":"brod_consumer.html#maybe_shrink_max_bytes/2","title":"brod_consumer.maybe_shrink_max_bytes/2","type":"function"},{"doc":"","ref":"brod_consumer.html#reset_buffer/1","title":"brod_consumer.reset_buffer/1","type":"function"},{"doc":"","ref":"brod_consumer.html#resolve_begin_offset/1","title":"brod_consumer.resolve_begin_offset/1","type":"function"},{"doc":"","ref":"brod_consumer.html#resolve_offset/4","title":"brod_consumer.resolve_offset/4","type":"function"},{"doc":"","ref":"brod_consumer.html#safe_gen_call/3","title":"brod_consumer.safe_gen_call/3","type":"function"},{"doc":"","ref":"brod_consumer.html#send_fetch_request/1","title":"brod_consumer.send_fetch_request/1","type":"function"},{"doc":"Equivalent to start_link(ClientPid, Topic, Partition, Config, []).","ref":"brod_consumer.html#start_link/4","title":"brod_consumer.start_link/4","type":"function"},{"doc":"Start (link) a partition consumer.Possible configs:min_bytes (optional, default = 0)Minimal bytes to fetch in a batch of messagesmax_bytes (optional, default = 1MB)Maximum bytes to fetch in a batch of messages.NOTE: this value might be expanded to retry when it is not enough to fetch even a single message, then slowly shrinked back to the given value.max_wait_time (optional, default = 10000 ms)Max number of seconds allowd for the broker to collect min_bytes of messages in fetch responsesleep_timeout (optional, default = 1000 ms)Allow consumer process to sleep this amout of ms if kafka replied 'empty' message set.prefetch_count (optional, default = 10)The window size (number of messages) allowed to fetch-ahead.prefetch_bytes (optional, default = 100KB)The total number of bytes allowed to fetch-ahead. brod_consumer is greed, it only stops fetching more messages in when number of unacked messages has exceeded prefetch_count AND the unacked total volume has exceeded prefetch_bytesbegin_offset (optional, default = latest)The offset from which to begin fetch requests.offset_reset_policy (optional, default = reset_by_subscriber)How to reset begin_offset if OffsetOutOfRange exception is received.reset_by_subscriber: consumer is suspended (is_suspended=true in state) and wait for subscriber to re-subscribe with a new begin_offset option.reset_to_earliest: consume from the earliest offset.reset_to_latest: consume from the last available offset.size_stat_window: (optional, default = 5)The moving-average window size to caculate average message size. Average message size is used to shrink max_bytes in fetch requests after it has been expanded to fetch a large message. Use 0 to immediately shrink back to original max_bytes from config. A size estimation allows users to set a relatively small max_bytes, then let it dynamically adjust to a number around PrefetchCount * AverageSize","ref":"brod_consumer.html#start_link/5","title":"brod_consumer.start_link/5","type":"function"},{"doc":"","ref":"brod_consumer.html#stop/1","title":"brod_consumer.stop/1","type":"function"},{"doc":"","ref":"brod_consumer.html#stop_maybe_kill/2","title":"brod_consumer.stop_maybe_kill/2","type":"function"},{"doc":"Subscribe or resubscribe on messages from a partition. Caller may specify a set of options extending consumer config. It is possible to update parameters such as max_bytes and max_wait_time, or the starting point (begin_offset) of the data stream.Possible options:All consumer configs as documented for start_link/5begin_offset (optional, default = latest)A subscriber may consume and process messages, then persist the associated offset to a persistent storage, then start (or restart) from last_processed_offset + 1 as the begin_offset to proceed. By default, it starts fetching from the latest available offset.","ref":"brod_consumer.html#subscribe/3","title":"brod_consumer.subscribe/3","type":"function"},{"doc":"Unsubscribe the current subscriber.","ref":"brod_consumer.html#unsubscribe/2","title":"brod_consumer.unsubscribe/2","type":"function"},{"doc":"","ref":"brod_consumer.html#update_avg_size/2","title":"brod_consumer.update_avg_size/2","type":"function"},{"doc":"","ref":"brod_consumer.html#update_options/2","title":"brod_consumer.update_options/2","type":"function"},{"doc":"","ref":"brod_consumer.html#t:bytes/0","title":"brod_consumer.bytes/0","type":"type"},{"doc":"","ref":"brod_consumer.html#t:config/0","title":"brod_consumer.config/0","type":"type"},{"doc":"","ref":"brod_consumer.html#t:offset/0","title":"brod_consumer.offset/0","type":"type"},{"doc":"","ref":"brod_consumer.html#t:offset_reset_policy/0","title":"brod_consumer.offset_reset_policy/0","type":"type"},{"doc":"","ref":"brod_consumer.html#t:offset_time/0","title":"brod_consumer.offset_time/0","type":"type"},{"doc":"","ref":"brod_consumer.html#t:options/0","title":"brod_consumer.options/0","type":"type"},{"doc":"","ref":"brod_consumer.html#t:partition/0","title":"brod_consumer.partition/0","type":"type"},{"doc":"","ref":"brod_consumer.html#t:pending/0","title":"brod_consumer.pending/0","type":"type"},{"doc":"","ref":"brod_consumer.html#t:pending_acks/0","title":"brod_consumer.pending_acks/0","type":"type"},{"doc":"","ref":"brod_consumer.html#t:pending_queue/0","title":"brod_consumer.pending_queue/0","type":"type"},{"doc":"","ref":"brod_consumer.html#t:state/0","title":"brod_consumer.state/0","type":"type"},{"doc":"","ref":"brod_consumer.html#t:topic/0","title":"brod_consumer.topic/0","type":"type"},{"doc":"","ref":"brod_group_coordinator.html","title":"brod_group_coordinator","type":"module"},{"doc":"For group member to call to acknowledge a consumed message offset.","ref":"brod_group_coordinator.html#ack/5","title":"brod_group_coordinator.ack/5","type":"function"},{"doc":"","ref":"brod_group_coordinator.html#all_topics/1","title":"brod_group_coordinator.all_topics/1","type":"function"},{"doc":"","ref":"brod_group_coordinator.html#assert_commit_response/1","title":"brod_group_coordinator.assert_commit_response/1","type":"function"},{"doc":"","ref":"brod_group_coordinator.html#assign_partitions/1","title":"brod_group_coordinator.assign_partitions/1","type":"function"},{"doc":"","ref":"brod_group_coordinator.html#bin/1","title":"brod_group_coordinator.bin/1","type":"function"},{"doc":"Callback implementation for :gen_server.code_change/3.","ref":"brod_group_coordinator.html#code_change/3","title":"brod_group_coordinator.code_change/3","type":"function"},{"doc":"","ref":"brod_group_coordinator.html#collect_commit_response_error_codes/1","title":"brod_group_coordinator.collect_commit_response_error_codes/1","type":"function"},{"doc":"Force commit collected (acked) offsets immediately.","ref":"brod_group_coordinator.html#commit_offsets/1","title":"brod_group_coordinator.commit_offsets/1","type":"function"},{"doc":"Force commit collected (acked) offsets plus the given extra offsets immediately.NOTE: lists:usort/1 is applied on the given extra offsets to commit, meaning if two or more offsets for the same topic-partition exist in the list, only the one closest the head of the list is kept","ref":"brod_group_coordinator.html#commit_offsets/2","title":"brod_group_coordinator.commit_offsets/2","type":"function"},{"doc":"","ref":"brod_group_coordinator.html#coordinator_id/0","title":"brod_group_coordinator.coordinator_id/0","type":"function"},{"doc":"","ref":"brod_group_coordinator.html#discover_coordinator/1","title":"brod_group_coordinator.discover_coordinator/1","type":"function"},{"doc":"","ref":"brod_group_coordinator.html#do_assign_partitions/3","title":"brod_group_coordinator.do_assign_partitions/3","type":"function"},{"doc":"","ref":"brod_group_coordinator.html#do_commit_offsets/1","title":"brod_group_coordinator.do_commit_offsets/1","type":"function"},{"doc":"","ref":"brod_group_coordinator.html#do_commit_offsets_/1","title":"brod_group_coordinator.do_commit_offsets_/1","type":"function"},{"doc":"","ref":"brod_group_coordinator.html#do_stabilize/3","title":"brod_group_coordinator.do_stabilize/3","type":"function"},{"doc":"","ref":"brod_group_coordinator.html#ensure_leader_at_hd/2","title":"brod_group_coordinator.ensure_leader_at_hd/2","type":"function"},{"doc":"","ref":"brod_group_coordinator.html#format_assignments/1","title":"brod_group_coordinator.format_assignments/1","type":"function"},{"doc":"","ref":"brod_group_coordinator.html#format_partition_assignments/1","title":"brod_group_coordinator.format_partition_assignments/1","type":"function"},{"doc":"","ref":"brod_group_coordinator.html#get_committed_offsets/2","title":"brod_group_coordinator.get_committed_offsets/2","type":"function"},{"doc":"","ref":"brod_group_coordinator.html#get_partitions/2","title":"brod_group_coordinator.get_partitions/2","type":"function"},{"doc":"","ref":"brod_group_coordinator.html#get_topic_assignments/2","title":"brod_group_coordinator.get_topic_assignments/2","type":"function"},{"doc":"","ref":"brod_group_coordinator.html#handle_ack/5","title":"brod_group_coordinator.handle_ack/5","type":"function"},{"doc":"Callback implementation for :gen_server.handle_call/3.","ref":"brod_group_coordinator.html#handle_call/3","title":"brod_group_coordinator.handle_call/3","type":"function"},{"doc":"Callback implementation for :gen_server.handle_cast/2.","ref":"brod_group_coordinator.html#handle_cast/2","title":"brod_group_coordinator.handle_cast/2","type":"function"},{"doc":"Callback implementation for :gen_server.handle_info/2.","ref":"brod_group_coordinator.html#handle_info/2","title":"brod_group_coordinator.handle_info/2","type":"function"},{"doc":"Callback implementation for :gen_server.init/1.","ref":"brod_group_coordinator.html#init/1","title":"brod_group_coordinator.init/1","type":"function"},{"doc":"","ref":"brod_group_coordinator.html#is_already_connected/2","title":"brod_group_coordinator.is_already_connected/2","type":"function"},{"doc":"","ref":"brod_group_coordinator.html#is_default_offset_retention/1","title":"brod_group_coordinator.is_default_offset_retention/1","type":"function"},{"doc":"","ref":"brod_group_coordinator.html#is_roundrobin_v1_commit/1","title":"brod_group_coordinator.is_roundrobin_v1_commit/1","type":"function"},{"doc":"","ref":"brod_group_coordinator.html#join_group/1","title":"brod_group_coordinator.join_group/1","type":"function"},{"doc":"","ref":"brod_group_coordinator.html#log/4","title":"brod_group_coordinator.log/4","type":"function"},{"doc":"","ref":"brod_group_coordinator.html#make_group_connection_client_id/0","title":"brod_group_coordinator.make_group_connection_client_id/0","type":"function"},{"doc":"","ref":"brod_group_coordinator.html#make_offset_commit_metadata/0","title":"brod_group_coordinator.make_offset_commit_metadata/0","type":"function"},{"doc":"","ref":"brod_group_coordinator.html#maybe_reset_member_id/2","title":"brod_group_coordinator.maybe_reset_member_id/2","type":"function"},{"doc":"","ref":"brod_group_coordinator.html#maybe_send_heartbeat/1","title":"brod_group_coordinator.maybe_send_heartbeat/1","type":"function"},{"doc":"","ref":"brod_group_coordinator.html#maybe_upgrade_from_roundrobin_v1/2","title":"brod_group_coordinator.maybe_upgrade_from_roundrobin_v1/2","type":"function"},{"doc":"","ref":"brod_group_coordinator.html#merge_acked_offsets/2","title":"brod_group_coordinator.merge_acked_offsets/2","type":"function"},{"doc":"","ref":"brod_group_coordinator.html#receive_pending_acks/1","title":"brod_group_coordinator.receive_pending_acks/1","type":"function"},{"doc":"","ref":"brod_group_coordinator.html#resolve_begin_offsets/3","title":"brod_group_coordinator.resolve_begin_offsets/3","type":"function"},{"doc":"","ref":"brod_group_coordinator.html#roundrobin_assign_loop/3","title":"brod_group_coordinator.roundrobin_assign_loop/3","type":"function"},{"doc":"","ref":"brod_group_coordinator.html#send_sync/2","title":"brod_group_coordinator.send_sync/2","type":"function"},{"doc":"","ref":"brod_group_coordinator.html#send_sync/3","title":"brod_group_coordinator.send_sync/3","type":"function"},{"doc":"","ref":"brod_group_coordinator.html#should_reset_member_id/1","title":"brod_group_coordinator.should_reset_member_id/1","type":"function"},{"doc":"","ref":"brod_group_coordinator.html#stabilize/3","title":"brod_group_coordinator.stabilize/3","type":"function"},{"doc":"","ref":"brod_group_coordinator.html#start_heartbeat_timer/1","title":"brod_group_coordinator.start_heartbeat_timer/1","type":"function"},{"doc":"Start a kafka consumer group coordinator.Client: ClientId (or pid, but not recommended)GroupId: Predefined globally unique (in a kafka cluster) binary string.Topics: Predefined set of topic names to join the group.CbModule: The module which implements group coordinator callbacksMemberPid: The member process pid.Config: The group coordinator configs in a proplist, possible entries:partition_assignment_strategy (optional, default = roundrobin_v2)Possible values:roundrobin_v2 (topic-sticky)Take all topic-offset (sorted topic_partition() list), assign one to each member in a roundrobin fashion. Only partitions in the subscription topic list are assiged.callback_implementedCall CbModule:assign_partitions/2 to assign partitions.session_timeout_seconds (optional, default = 10)Time in seconds for the group coordinator broker to consider a member 'down' if no heartbeat or any kind of requests received from a broker in the past N seconds. A group member may also consider the coordinator broker 'down' if no heartbeat response response received in the past N seconds.heartbeat_rate_seconds (optional, default = 2)Time in seconds for the member to 'ping' the group coordinator. OBS: Care should be taken when picking the number, on one hand, we do not want to flush the broker with requests if we set it too low, on the other hand, if set it too high, it may take too long for the members to realise status changes of the group such as assignment rebalacing or group coordinator switchover etc.max_rejoin_attempts (optional, default = 5)Maximum number of times allowd for a member to re-join the group. The gen_server will stop if it reached the maximum number of retries. OBS: 'let it crash' may not be the optimal strategy here because the group member id is kept in the gen_server looping state and it is reused when re-joining the group.rejoin_delay_seconds (optional, default = 1)Delay in seconds before re-joining the group.offset_commit_policy (optional, default = commit_to_kafka_v2)How/where to commit offsets, possible values:commit_to_kafka_v2: Group coordinator will commit the offsets to kafka using version 2 OffsetCommitRequest.consumer_managed: The group member (e.g. brod_group_subscriber.erl) is responsible for persisting offsets to a local or centralized storage. And the callback get_committed_offsets should be implemented to allow group coordinator to retrieve the commited offsets.offset_commit_interval_seconds (optional, default = 5)The time interval between two OffsetCommitRequest messages. This config is irrelevant if offset_commit_policy is consumer_managed.offset_retention_seconds (optional, default = -1)How long the time is to be kept in kafka before it is deleted. The default special value -1 indicates that the __consumer_offsets topic retention policy is used. This config is irrelevant if offset_commit_policy is consumer_managed.protocol_name (optional, default = roundrobin_v2)This is the protocol name used when join a group, if not given, by default partition_assignment_strategy is used as the protocol name. Setting a protocol name allows to interact with consumer group members designed in other programing languages. For example, 'range' is the most commonly used protocol name for JAVA client. However, brod only supports roundrobin protocol out of the box, in order to mimic 'range' protocol one will have to do it via callback_implemented assignment strategy","ref":"brod_group_coordinator.html#start_link/6","title":"brod_group_coordinator.start_link/6","type":"function"},{"doc":"","ref":"brod_group_coordinator.html#start_offset_commit_timer/1","title":"brod_group_coordinator.start_offset_commit_timer/1","type":"function"},{"doc":"Stop group coordinator, wait for pid DOWN before return.","ref":"brod_group_coordinator.html#stop/1","title":"brod_group_coordinator.stop/1","type":"function"},{"doc":"","ref":"brod_group_coordinator.html#sync_group/1","title":"brod_group_coordinator.sync_group/1","type":"function"},{"doc":"Callback implementation for :gen_server.terminate/2.","ref":"brod_group_coordinator.html#terminate/2","title":"brod_group_coordinator.terminate/2","type":"function"},{"doc":"","ref":"brod_group_coordinator.html#translate_members/1","title":"brod_group_coordinator.translate_members/1","type":"function"},{"doc":"","ref":"brod_group_coordinator.html#try_commit_offsets/1","title":"brod_group_coordinator.try_commit_offsets/1","type":"function"},{"doc":"Update the list of topics the brod_group_coordinator follow which triggers a join group rebalance","ref":"brod_group_coordinator.html#update_topics/2","title":"brod_group_coordinator.update_topics/2","type":"function"},{"doc":"","ref":"brod_group_coordinator.html#user_data/2","title":"brod_group_coordinator.user_data/2","type":"function"},{"doc":"","ref":"brod_group_coordinator.html#t:brod_offset_commit_policy/0","title":"brod_group_coordinator.brod_offset_commit_policy/0","type":"type"},{"doc":"","ref":"brod_group_coordinator.html#t:brod_partition_assignment_strategy/0","title":"brod_group_coordinator.brod_partition_assignment_strategy/0","type":"type"},{"doc":"","ref":"brod_group_coordinator.html#t:config/0","title":"brod_group_coordinator.config/0","type":"type"},{"doc":"","ref":"brod_group_coordinator.html#t:member/0","title":"brod_group_coordinator.member/0","type":"type"},{"doc":"","ref":"brod_group_coordinator.html#t:member_id/0","title":"brod_group_coordinator.member_id/0","type":"type"},{"doc":"","ref":"brod_group_coordinator.html#t:offset_commit_policy/0","title":"brod_group_coordinator.offset_commit_policy/0","type":"type"},{"doc":"","ref":"brod_group_coordinator.html#t:partition_assignment_strategy/0","title":"brod_group_coordinator.partition_assignment_strategy/0","type":"type"},{"doc":"","ref":"brod_group_coordinator.html#t:protocol_name/0","title":"brod_group_coordinator.protocol_name/0","type":"type"},{"doc":"","ref":"brod_group_coordinator.html#t:state/0","title":"brod_group_coordinator.state/0","type":"type"},{"doc":"","ref":"brod_group_coordinator.html#t:ts/0","title":"brod_group_coordinator.ts/0","type":"type"},{"doc":"Implement brod_group_member behaviour callbacks to allow a process to act as a group member without having to deal with Kafka group protocol details. A typical workflow:1. Spawn a group coordinator by calling brod_group_coordinator:start_link/6.2. Subscribe to partitions received in the assignments from assignments_received/4 callback.3. Receive messages from the assigned partitions (delivered by the partition workers (the pollers) implemented in brod_consumer).4. Unsubscribe from all previously subscribed partitions when assignments_revoked/1 is called.For group members that commit offsets to Kafka, do:1. Call brod_group_coordinator:ack/4. to acknowledge sucessful consumption of the messages. Group coordinator will commit the acknowledged offsets at configured interval.2. Call brod_group_coordinator:commit_offsets/2 to force an immediate offset commit if necessary.For group members that manage offsets locally, do:1. Implement the get_committed_offsets/2 callback. This callback is evaluated every time when new assignments are received.","ref":"brod_group_member.html","title":"brod_group_member","type":"behaviour"},{"doc":"","ref":"brod_group_member.html#c:assign_partitions/3","title":"brod_group_member.assign_partitions/3","type":"callback"},{"doc":"","ref":"brod_group_member.html#c:assignments_received/4","title":"brod_group_member.assignments_received/4","type":"callback"},{"doc":"","ref":"brod_group_member.html#c:assignments_revoked/1","title":"brod_group_member.assignments_revoked/1","type":"callback"},{"doc":"","ref":"brod_group_member.html#c:get_committed_offsets/2","title":"brod_group_member.get_committed_offsets/2","type":"callback"},{"doc":"","ref":"brod_group_member.html#c:user_data/1","title":"brod_group_member.user_data/1","type":"callback"},{"doc":"A group subscriber is a gen_server which subscribes to partition consumers (poller) and calls the user-defined callback functions for message processing.An overview of what it does behind the scene:Start a consumer group coordinator to manage the consumer group states, see brod_group_coordinator:start_link/6Start (if not already started) topic-consumers (pollers) and subscribe to the partition workers when group assignment is received from the group leader, see brod:start_consumer/3Call CallbackModule:handle_message/4 when messages are received from the partition consumers.Send acknowledged offsets to group coordinator which will be committed to kafka periodically.","ref":"brod_group_subscriber.html","title":"brod_group_subscriber","type":"behaviour"},{"doc":"Acknowledge and commit an offset. The subscriber may ack a later (greater) offset which will be considered as multi-acking the earlier (smaller) offsets. This also means that disordered acks may overwrite offset commits and lead to unnecessary message re-delivery in case of restart.","ref":"brod_group_subscriber.html#ack/4","title":"brod_group_subscriber.ack/4","type":"function"},{"doc":"Acknowledge an offset. This call may or may not commit group subscriber offset depending on the value of Commit argument","ref":"brod_group_subscriber.html#ack/5","title":"brod_group_subscriber.ack/5","type":"function"},{"doc":"This function is called only when partition_assignment_strategy is set for callback_implemented in group config.","ref":"brod_group_subscriber.html#assign_partitions/3","title":"brod_group_subscriber.assign_partitions/3","type":"function"},{"doc":"Called by group coordinator when there is new assignment received.","ref":"brod_group_subscriber.html#assignments_received/4","title":"brod_group_subscriber.assignments_received/4","type":"function"},{"doc":"Called by group coordinator before re-joining the consumer group.","ref":"brod_group_subscriber.html#assignments_revoked/1","title":"brod_group_subscriber.assignments_revoked/1","type":"function"},{"doc":"Callback implementation for :gen_server.code_change/3.","ref":"brod_group_subscriber.html#code_change/3","title":"brod_group_subscriber.code_change/3","type":"function"},{"doc":"Commit all acked offsets. NOTE: This is an async call.","ref":"brod_group_subscriber.html#commit/1","title":"brod_group_subscriber.commit/1","type":"function"},{"doc":"Commit offset for a topic. This is an asynchronous call","ref":"brod_group_subscriber.html#commit/4","title":"brod_group_subscriber.commit/4","type":"function"},{"doc":"","ref":"brod_group_subscriber.html#consume_ack/2","title":"brod_group_subscriber.consume_ack/2","type":"function"},{"doc":"","ref":"brod_group_subscriber.html#do_commit_ack/5","title":"brod_group_subscriber.do_commit_ack/5","type":"function"},{"doc":"Called by group coordinator when initializing the assignments for subscriber.NOTE: This function is called only when offset_commit_policy is set to consumer_managed in group config.NOTE: The committed offsets should be the offsets for successfully processed (acknowledged) messages, not the begin_offset to start fetching from.","ref":"brod_group_subscriber.html#get_committed_offsets/2","title":"brod_group_subscriber.get_committed_offsets/2","type":"function"},{"doc":"","ref":"brod_group_subscriber.html#get_consumer/2","title":"brod_group_subscriber.get_consumer/2","type":"function"},{"doc":"","ref":"brod_group_subscriber.html#handle_ack/3","title":"brod_group_subscriber.handle_ack/3","type":"function"},{"doc":"Callback implementation for :gen_server.handle_call/3.","ref":"brod_group_subscriber.html#handle_call/3","title":"brod_group_subscriber.handle_call/3","type":"function"},{"doc":"Callback implementation for :gen_server.handle_cast/2.","ref":"brod_group_subscriber.html#handle_cast/2","title":"brod_group_subscriber.handle_cast/2","type":"function"},{"doc":"","ref":"brod_group_subscriber.html#handle_consumer_delivery/2","title":"brod_group_subscriber.handle_consumer_delivery/2","type":"function"},{"doc":"Callback implementation for :gen_server.handle_info/2.","ref":"brod_group_subscriber.html#handle_info/2","title":"brod_group_subscriber.handle_info/2","type":"function"},{"doc":"","ref":"brod_group_subscriber.html#c:handle_message/4","title":"brod_group_subscriber.handle_message/4","type":"callback"},{"doc":"","ref":"brod_group_subscriber.html#handle_message_set/2","title":"brod_group_subscriber.handle_message_set/2","type":"function"},{"doc":"","ref":"brod_group_subscriber.html#handle_messages/4","title":"brod_group_subscriber.handle_messages/4","type":"function"},{"doc":"Callback implementation for :gen_server.init/1.","ref":"brod_group_subscriber.html#init/1","title":"brod_group_subscriber.init/1","type":"function"},{"doc":"","ref":"brod_group_subscriber.html#c:init/2","title":"brod_group_subscriber.init/2","type":"callback"},{"doc":"","ref":"brod_group_subscriber.html#log/4","title":"brod_group_subscriber.log/4","type":"function"},{"doc":"","ref":"brod_group_subscriber.html#put_consumer/2","title":"brod_group_subscriber.put_consumer/2","type":"function"},{"doc":"Equivalent to start_link(Client, GroupId, Topics, GroupConfig, ConsumerConfig, message, CbModule, CbInitArg).","ref":"brod_group_subscriber.html#start_link/7","title":"brod_group_subscriber.start_link/7","type":"function"},{"doc":"Start (link) a group subscriber.Client: Client ID (or pid, but not recommended) of the brod client.GroupId: Consumer group ID which should be unique per kafka clusterTopics: Predefined set of topic names to join the group.NOTE: The group leader member will collect topics from all members and assign all collected topic-partitions to members in the group. i.e. members can join with arbitrary set of topics.GroupConfig: For group coordinator, see brod_group_coordinator:start_link/6ConsumerConfig: For partition consumer, see brod_consumer:start_link/4MessageType: The type of message that is going to be handled by the callback module. Can be either message or message_set.CbModule: Callback module which should have the callback functions implemented for message processing.CbInitArg: The term() that is going to be passed to CbModule:init/2 as a second argument when initializing the subscriber.","ref":"brod_group_subscriber.html#start_link/8","title":"brod_group_subscriber.start_link/8","type":"function"},{"doc":"","ref":"brod_group_subscriber.html#start_subscribe_timer/2","title":"brod_group_subscriber.start_subscribe_timer/2","type":"function"},{"doc":"Stop group subscriber, wait for pid DOWN before return.","ref":"brod_group_subscriber.html#stop/1","title":"brod_group_subscriber.stop/1","type":"function"},{"doc":"","ref":"brod_group_subscriber.html#subscribe_partition/2","title":"brod_group_subscriber.subscribe_partition/2","type":"function"},{"doc":"","ref":"brod_group_subscriber.html#subscribe_partitions/1","title":"brod_group_subscriber.subscribe_partitions/1","type":"function"},{"doc":"Callback implementation for :gen_server.terminate/2.","ref":"brod_group_subscriber.html#terminate/2","title":"brod_group_subscriber.terminate/2","type":"function"},{"doc":"","ref":"brod_group_subscriber.html#update_last_offset/3","title":"brod_group_subscriber.update_last_offset/3","type":"function"},{"doc":"Callback implementation for c::brod_group_member.user_data/1.","ref":"brod_group_subscriber.html#user_data/1","title":"brod_group_subscriber.user_data/1","type":"function"},{"doc":"","ref":"brod_group_subscriber.html#t:ack_ref/0","title":"brod_group_subscriber.ack_ref/0","type":"type"},{"doc":"","ref":"brod_group_subscriber.html#t:cb_state/0","title":"brod_group_subscriber.cb_state/0","type":"type"},{"doc":"","ref":"brod_group_subscriber.html#t:consumer/0","title":"brod_group_subscriber.consumer/0","type":"type"},{"doc":"","ref":"brod_group_subscriber.html#t:member_id/0","title":"brod_group_subscriber.member_id/0","type":"type"},{"doc":"","ref":"brod_group_subscriber.html#t:state/0","title":"brod_group_subscriber.state/0","type":"type"},{"doc":"This module implements an improved version of brod_group_subscriber behavior. Key difference is that each partition worker runs in a separate Erlang process, allowing parallel message processing.","ref":"brod_group_subscriber_v2.html","title":"brod_group_subscriber_v2","type":"behaviour"},{"doc":"Commit offset for a topic-partition, but don't commit it to Kafka. This is an asynchronous call","ref":"brod_group_subscriber_v2.html#ack/4","title":"brod_group_subscriber_v2.ack/4","type":"function"},{"doc":"This function is called only when partition_assignment_strategy is set for callback_implemented in group config.","ref":"brod_group_subscriber_v2.html#assign_partitions/3","title":"brod_group_subscriber_v2.assign_partitions/3","type":"function"},{"doc":"","ref":"brod_group_subscriber_v2.html#c:assign_partitions/3","title":"brod_group_subscriber_v2.assign_partitions/3","type":"callback"},{"doc":"Called by group coordinator when there is new assignment received.","ref":"brod_group_subscriber_v2.html#assignments_received/4","title":"brod_group_subscriber_v2.assignments_received/4","type":"function"},{"doc":"Called by group coordinator before re-joining the consumer group.","ref":"brod_group_subscriber_v2.html#assignments_revoked/1","title":"brod_group_subscriber_v2.assignments_revoked/1","type":"function"},{"doc":"Ack offset for a topic-partition. This is an asynchronous call","ref":"brod_group_subscriber_v2.html#commit/4","title":"brod_group_subscriber_v2.commit/4","type":"function"},{"doc":"","ref":"brod_group_subscriber_v2.html#do_ack/4","title":"brod_group_subscriber_v2.do_ack/4","type":"function"},{"doc":"","ref":"brod_group_subscriber_v2.html#flush_offset_commits/2","title":"brod_group_subscriber_v2.flush_offset_commits/2","type":"function"},{"doc":"","ref":"brod_group_subscriber_v2.html#c:get_committed_offset/3","title":"brod_group_subscriber_v2.get_committed_offset/3","type":"callback"},{"doc":"Called by group coordinator when initializing the assignments for subscriber.NOTE: This function is called only when offset_commit_policy is set to consumer_managed in group config.NOTE: The committed offsets should be the offsets for successfully processed (acknowledged) messages, not the begin_offset to start fetching from.","ref":"brod_group_subscriber_v2.html#get_committed_offsets/2","title":"brod_group_subscriber_v2.get_committed_offsets/2","type":"function"},{"doc":"Callback implementation for :gen_server.handle_call/3.","ref":"brod_group_subscriber_v2.html#handle_call/3","title":"brod_group_subscriber_v2.handle_call/3","type":"function"},{"doc":"","ref":"brod_group_subscriber_v2.html#c:handle_message/2","title":"brod_group_subscriber_v2.handle_message/2","type":"callback"},{"doc":"","ref":"brod_group_subscriber_v2.html#handle_worker_failure/4","title":"brod_group_subscriber_v2.handle_worker_failure/4","type":"function"},{"doc":"","ref":"brod_group_subscriber_v2.html#c:init/2","title":"brod_group_subscriber_v2.init/2","type":"callback"},{"doc":"","ref":"brod_group_subscriber_v2.html#maybe_start_worker/6","title":"brod_group_subscriber_v2.maybe_start_worker/6","type":"function"},{"doc":"Start (link) a group subscriber.Possible Config keys:client: Client ID (or pid, but not recommended) of the brod client. Mandatorygroup_id: Consumer group ID which should be unique per kafka cluster. Mandatorytopics: Predefined set of topic names to join the group. MandatoryNOTE: The group leader member will collect topics from all members and assign all collected topic-partitions to members in the group. i.e. members can join with arbitrary set of topics.cb_module: Callback module which should have the callback functions implemented for message processing. Mandatorygroup_config: For group coordinator, see brod_group_coordinator:start_link/6 Optionalconsumer_config: For partition consumer, brod_topic_subscriber:start_link/6. Optionalmessage_type: The type of message that is going to be handled by the callback module. Can be either message or message set. Optional, defaults to messageinit_data: The term() that is going to be passed to CbModule:init/2 when initializing the subscriber. Optional, defaults to undefined","ref":"brod_group_subscriber_v2.html#start_link/1","title":"brod_group_subscriber_v2.start_link/1","type":"function"},{"doc":"","ref":"brod_group_subscriber_v2.html#start_worker/6","title":"brod_group_subscriber_v2.start_worker/6","type":"function"},{"doc":"Stop group subscriber, wait for pid DOWN before return.","ref":"brod_group_subscriber_v2.html#stop/1","title":"brod_group_subscriber_v2.stop/1","type":"function"},{"doc":"","ref":"brod_group_subscriber_v2.html#c:terminate/2","title":"brod_group_subscriber_v2.terminate/2","type":"callback"},{"doc":"","ref":"brod_group_subscriber_v2.html#terminate_all_workers/1","title":"brod_group_subscriber_v2.terminate_all_workers/1","type":"function"},{"doc":"","ref":"brod_group_subscriber_v2.html#terminate_worker/1","title":"brod_group_subscriber_v2.terminate_worker/1","type":"function"},{"doc":"","ref":"brod_group_subscriber_v2.html#t:commit_fun/0","title":"brod_group_subscriber_v2.commit_fun/0","type":"type"},{"doc":"","ref":"brod_group_subscriber_v2.html#t:committed_offsets/0","title":"brod_group_subscriber_v2.committed_offsets/0","type":"type"},{"doc":"","ref":"brod_group_subscriber_v2.html#t:init_info/0","title":"brod_group_subscriber_v2.init_info/0","type":"type"},{"doc":"","ref":"brod_group_subscriber_v2.html#t:member_id/0","title":"brod_group_subscriber_v2.member_id/0","type":"type"},{"doc":"","ref":"brod_group_subscriber_v2.html#t:state/0","title":"brod_group_subscriber_v2.state/0","type":"type"},{"doc":"","ref":"brod_group_subscriber_v2.html#t:subscriber_config/0","title":"brod_group_subscriber_v2.subscriber_config/0","type":"type"},{"doc":"","ref":"brod_group_subscriber_v2.html#t:worker/0","title":"brod_group_subscriber_v2.worker/0","type":"type"},{"doc":"","ref":"brod_group_subscriber_v2.html#t:workers/0","title":"brod_group_subscriber_v2.workers/0","type":"type"},{"doc":"Helper functions for building request messages.","ref":"brod_kafka_request.html","title":"brod_kafka_request","type":"module"},{"doc":"Make a create_topics request.","ref":"brod_kafka_request.html#create_topics/3","title":"brod_kafka_request.create_topics/3","type":"function"},{"doc":"Make a delete_topics request.","ref":"brod_kafka_request.html#delete_topics/3","title":"brod_kafka_request.delete_topics/3","type":"function"},{"doc":"","ref":"brod_kafka_request.html#ensure_integer_offset_time/1","title":"brod_kafka_request.ensure_integer_offset_time/1","type":"function"},{"doc":"Make a fetch request, If the first arg is a connection pid, call brod_kafka_apis:pick_version/2 to resolve version.","ref":"brod_kafka_request.html#fetch/7","title":"brod_kafka_request.fetch/7","type":"function"},{"doc":"Make a join_group request.","ref":"brod_kafka_request.html#join_group/2","title":"brod_kafka_request.join_group/2","type":"function"},{"doc":"Make a list_groups request.","ref":"brod_kafka_request.html#list_groups/1","title":"brod_kafka_request.list_groups/1","type":"function"},{"doc":"Make a list_offsets request message for offset resolution. In kafka protocol, -2 and -1 are semantic 'time' to request for 'earliest' and 'latest' offsets. In brod implementation, -2, -1, 'earliest' and 'latest' are semantic 'offset', this is why often a variable named Offset is used as the Time argument.","ref":"brod_kafka_request.html#list_offsets/4","title":"brod_kafka_request.list_offsets/4","type":"function"},{"doc":"","ref":"brod_kafka_request.html#make_req/3","title":"brod_kafka_request.make_req/3","type":"function"},{"doc":"Make a metadata request.","ref":"brod_kafka_request.html#metadata/2","title":"brod_kafka_request.metadata/2","type":"function"},{"doc":"Make a offset_commit request.","ref":"brod_kafka_request.html#offset_commit/2","title":"brod_kafka_request.offset_commit/2","type":"function"},{"doc":"Make a offset fetch request. NOTE: empty topics list only works for kafka 0.10.2.0 or later","ref":"brod_kafka_request.html#offset_fetch/3","title":"brod_kafka_request.offset_fetch/3","type":"function"},{"doc":"","ref":"brod_kafka_request.html#pick_version/2","title":"brod_kafka_request.pick_version/2","type":"function"},{"doc":"Make a produce request, If the first arg is a connection pid, call brod_kafka_apis:pick_version/2 to resolve version.","ref":"brod_kafka_request.html#produce/7","title":"brod_kafka_request.produce/7","type":"function"},{"doc":"Make a sync_group request.","ref":"brod_kafka_request.html#sync_group/2","title":"brod_kafka_request.sync_group/2","type":"function"},{"doc":"","ref":"brod_kafka_request.html#t:api/0","title":"brod_kafka_request.api/0","type":"type"},{"doc":"","ref":"brod_kafka_request.html#t:conn/0","title":"brod_kafka_request.conn/0","type":"type"},{"doc":"","ref":"brod_kafka_request.html#t:offset/0","title":"brod_kafka_request.offset/0","type":"type"},{"doc":"","ref":"brod_kafka_request.html#t:partition/0","title":"brod_kafka_request.partition/0","type":"type"},{"doc":"","ref":"brod_kafka_request.html#t:topic/0","title":"brod_kafka_request.topic/0","type":"type"},{"doc":"","ref":"brod_kafka_request.html#t:topic_config/0","title":"brod_kafka_request.topic_config/0","type":"type"},{"doc":"","ref":"brod_kafka_request.html#t:vsn/0","title":"brod_kafka_request.vsn/0","type":"type"},{"doc":"","ref":"brod_producer.html","title":"brod_producer","type":"module"},{"doc":"","ref":"brod_producer.html#cancel_delay_send_timer/1","title":"brod_producer.cancel_delay_send_timer/1","type":"function"},{"doc":"","ref":"brod_producer.html#do_handle_produce/3","title":"brod_producer.do_handle_produce/3","type":"function"},{"doc":"","ref":"brod_producer.html#handle_produce/3","title":"brod_producer.handle_produce/3","type":"function"},{"doc":"","ref":"brod_producer.html#is_retriable/1","title":"brod_producer.is_retriable/1","type":"function"},{"doc":"","ref":"brod_producer.html#log_error_code/4","title":"brod_producer.log_error_code/4","type":"function"},{"doc":"","ref":"brod_producer.html#maybe_demonitor/1","title":"brod_producer.maybe_demonitor/1","type":"function"},{"doc":"","ref":"brod_producer.html#maybe_produce/1","title":"brod_producer.maybe_produce/1","type":"function"},{"doc":"","ref":"brod_producer.html#maybe_reinit_connection/1","title":"brod_producer.maybe_reinit_connection/1","type":"function"},{"doc":"Produce a message to partition asynchronizely. The call is blocked until the request has been buffered in producer worker The function returns a call reference of type call_ref() to the caller so the caller can used it to expect (match) a #brod_produce_reply{result = brod_produce_req_acked} message after the produce request has been acked by kafka.","ref":"brod_producer.html#produce/3","title":"brod_producer.produce/3","type":"function"},{"doc":"Async produce, evaluate callback if AckCb is a function otherwise send #brod_produce_reply{result = brod_produce_req_acked} message to caller after the produce request has been acked by kafka.","ref":"brod_producer.html#produce_cb/4","title":"brod_producer.produce_cb/4","type":"function"},{"doc":"Fire-n-forget, no ack, no back-pressure.","ref":"brod_producer.html#produce_no_ack/3","title":"brod_producer.produce_no_ack/3","type":"function"},{"doc":"","ref":"brod_producer.html#req_vsn/2","title":"brod_producer.req_vsn/2","type":"function"},{"doc":"","ref":"brod_producer.html#schedule_retry/1","title":"brod_producer.schedule_retry/1","type":"function"},{"doc":"","ref":"brod_producer.html#send/2","title":"brod_producer.send/2","type":"function"},{"doc":"","ref":"brod_producer.html#start_delay_send_timer/1","title":"brod_producer.start_delay_send_timer/1","type":"function"},{"doc":"Start (link) a partition producer.Possible configs:required_acks (optional, default = -1):How many acknowledgements the kafka broker should receive from the clustered replicas before acking producer. 0: the broker will not send any response (this is the only case where the broker will not reply to a request) 1: The leader will wait the data is written to the local log before sending a response. -1: If it is -1 the broker will block until the message is committed by all in sync replicas before acking.ack_timeout (optional, default = 10000 ms):Maximum time in milliseconds the broker can await the receipt of the number of acknowledgements in RequiredAcks. The timeout is not an exact limit on the request time for a few reasons: (1) it does not include network latency, (2) the timer begins at the beginning of the processing of this request so if many requests are queued due to broker overload that wait time will not be included, (3) kafka leader will not terminate a local write so if the local write time exceeds this timeout it will not be respected.partition_buffer_limit (optional, default = 256):How many requests (per-partition) can be buffered without blocking the caller. The callers are released (by receiving the 'brod_produce_req_buffered' reply) once the request is taken into buffer and after the request has been put on wire, then the caller may expect a reply 'brod_produce_req_acked' when the request is accepted by kafka.partition_onwire_limit (optional, default = 1):How many message sets (per-partition) can be sent to kafka broker asynchronously before receiving ACKs from broker.NOTE: setting a number greater than 1 may cause messages being persisted in an order different from the order they were produced.max_batch_size (in bytes, optional, default = 1M):In case callers are producing faster than brokers can handle (or congestion on wire), try to accumulate small requests into batches as much as possible but not exceeding max_batch_size.OBS: If compression is enabled, care should be taken when picking the max batch size, because a compressed batch will be produced as one message and this message might be larger than 'max.message.bytes' in kafka config (or topic config)max_retries (optional, default = 3):If {max_retries, N} is given, the producer retry produce request for N times before crashing in case of failures like connection being shutdown by remote or exceptions received in produce response from kafka. The special value N = -1 means &quot;retry indefinitely&quot;retry_backoff_ms (optional, default = 500);Time in milli-seconds to sleep before retry the failed produce request.compression (optional, default = no_compression):gzip or snappy to enable compressionmax_linger_ms (optional, default = 0):Messages are allowed to 'linger' in buffer for this amount of milli-seconds before being sent. Definition of 'linger': A message is in &quot;linger&quot; state when it is allowed to be sent on-wire, but chosen not to (for better batching).The default value is 0 for 2 reasons:Backward compatibility (for 2.x releases)Not to surprise brod:produce_sync callersmax_linger_count (optional, default = 0):At most this amount (count not size) of messages are allowed to &quot;linger&quot; in buffer. Messages will be sent regardless of &quot;linger&quot; age when this threshold is hit.NOTE: It does not make sense to have this value set larger than partition_buffer_limitproduce_req_vsn (optional, default = undefined):User determined produce API version to use, discard the API version range received from kafka. This is to be used when a topic in newer version kafka is configured to store older version message format. e.g. When a topic in kafka 0.11 is configured to have message format 0.10, sending message with headers would result in unknown_server_error error code.","ref":"brod_producer.html#start_link/4","title":"brod_producer.start_link/4","type":"function"},{"doc":"Stop the process","ref":"brod_producer.html#stop/1","title":"brod_producer.stop/1","type":"function"},{"doc":"Block calling process until it receives an acked reply for the CallRef. The caller pid of this function must be the caller of produce/3 in which the call reference was created.","ref":"brod_producer.html#sync_produce_request/2","title":"brod_producer.sync_produce_request/2","type":"function"},{"doc":"","ref":"brod_producer.html#t:call_ref/0","title":"brod_producer.call_ref/0","type":"type"},{"doc":"","ref":"brod_producer.html#t:config/0","title":"brod_producer.config/0","type":"type"},{"doc":"","ref":"brod_producer.html#t:conn/0","title":"brod_producer.conn/0","type":"type"},{"doc":"","ref":"brod_producer.html#t:delay_send_ref/0","title":"brod_producer.delay_send_ref/0","type":"type"},{"doc":"","ref":"brod_producer.html#t:milli_sec/0","title":"brod_producer.milli_sec/0","type":"type"},{"doc":"","ref":"brod_producer.html#t:offset/0","title":"brod_producer.offset/0","type":"type"},{"doc":"","ref":"brod_producer.html#t:partition/0","title":"brod_producer.partition/0","type":"type"},{"doc":"","ref":"brod_producer.html#t:state/0","title":"brod_producer.state/0","type":"type"},{"doc":"","ref":"brod_producer.html#t:topic/0","title":"brod_producer.topic/0","type":"type"},{"doc":"A topic subscriber is a gen_server which subscribes to all or a given set of partition consumers (pollers) of a given topic and calls the user-defined callback functions for message processing.","ref":"brod_topic_subscriber.html","title":"brod_topic_subscriber","type":"behaviour"},{"doc":"Acknowledge that message has been sucessfully consumed.","ref":"brod_topic_subscriber.html#ack/3","title":"brod_topic_subscriber.ack/3","type":"function"},{"doc":"","ref":"brod_topic_subscriber.html#consume_ack/2","title":"brod_topic_subscriber.consume_ack/2","type":"function"},{"doc":"","ref":"brod_topic_subscriber.html#get_consumer/2","title":"brod_topic_subscriber.get_consumer/2","type":"function"},{"doc":"","ref":"brod_topic_subscriber.html#handle_ack/2","title":"brod_topic_subscriber.handle_ack/2","type":"function"},{"doc":"","ref":"brod_topic_subscriber.html#handle_consumer_delivery/2","title":"brod_topic_subscriber.handle_consumer_delivery/2","type":"function"},{"doc":"","ref":"brod_topic_subscriber.html#c:handle_message/3","title":"brod_topic_subscriber.handle_message/3","type":"callback"},{"doc":"","ref":"brod_topic_subscriber.html#handle_message_set/2","title":"brod_topic_subscriber.handle_message_set/2","type":"function"},{"doc":"","ref":"brod_topic_subscriber.html#handle_messages/3","title":"brod_topic_subscriber.handle_messages/3","type":"function"},{"doc":"","ref":"brod_topic_subscriber.html#c:init/2","title":"brod_topic_subscriber.init/2","type":"callback"},{"doc":"","ref":"brod_topic_subscriber.html#put_consumer/2","title":"brod_topic_subscriber.put_consumer/2","type":"function"},{"doc":"","ref":"brod_topic_subscriber.html#send_lo_cmd/1","title":"brod_topic_subscriber.send_lo_cmd/1","type":"function"},{"doc":"","ref":"brod_topic_subscriber.html#send_lo_cmd/2","title":"brod_topic_subscriber.send_lo_cmd/2","type":"function"},{"doc":"Start (link) a topic subscriber which receives and processes the messages from a given partition set.Possible Config keys:client: Client ID (or pid, but not recommended) of the brod client. Mandatorytopic: Topic to consume from. Mandatorycb_module: Callback module which should have the callback functions implemented for message processing. Mandatoryconsumer_config: For partition consumer, brod_topic_subscriber:start_link/6. Optional, defaults to []message_type: The type of message that is going to be handled by the callback module. Can be either message or message set. Optional, defaults to message_setinit_data: The term() that is going to be passed to CbModule:init/2 when initializing the subscriber. Optional, defaults to undefinedpartitions: List of partitions to consume from, or atom all. Optional, defaults to all.","ref":"brod_topic_subscriber.html#start_link/1","title":"brod_topic_subscriber.start_link/1","type":"function"},{"doc":"Equivalent to start_link(Client, Topic, Partitions, ConsumerConfig, message, CbModule, CbInitArg).","ref":"brod_topic_subscriber.html#start_link/6","title":"brod_topic_subscriber.start_link/6","type":"function"},{"doc":"Start (link) a topic subscriber which receives and processes the messages or message sets from the given partition set. Use atom all to subscribe to all partitions. Messages are handled by calling CbModule:handle_message","ref":"brod_topic_subscriber.html#start_link/7","title":"brod_topic_subscriber.start_link/7","type":"function"},{"doc":"Start (link) a topic subscriber which receives and processes the messages from the given partition set. Use atom all to subscribe to all partitions. Messages are handled by calling the callback function.NOTE: CommittedOffsets are the offsets for the messages that have been successfully processed (acknowledged), not the begin-offset to start fetching from.","ref":"brod_topic_subscriber.html#start_link/8","title":"brod_topic_subscriber.start_link/8","type":"function"},{"doc":"Stop topic subscriber.","ref":"brod_topic_subscriber.html#stop/1","title":"brod_topic_subscriber.stop/1","type":"function"},{"doc":"","ref":"brod_topic_subscriber.html#subscribe_partition/3","title":"brod_topic_subscriber.subscribe_partition/3","type":"function"},{"doc":"","ref":"brod_topic_subscriber.html#subscribe_partitions/1","title":"brod_topic_subscriber.subscribe_partitions/1","type":"function"},{"doc":"","ref":"brod_topic_subscriber.html#c:terminate/2","title":"brod_topic_subscriber.terminate/2","type":"callback"},{"doc":"","ref":"brod_topic_subscriber.html#update_last_offset/3","title":"brod_topic_subscriber.update_last_offset/3","type":"function"},{"doc":"","ref":"brod_topic_subscriber.html#t:ack_ref/0","title":"brod_topic_subscriber.ack_ref/0","type":"type"},{"doc":"","ref":"brod_topic_subscriber.html#t:cb_fun/0","title":"brod_topic_subscriber.cb_fun/0","type":"type"},{"doc":"","ref":"brod_topic_subscriber.html#t:cb_ret/0","title":"brod_topic_subscriber.cb_ret/0","type":"type"},{"doc":"","ref":"brod_topic_subscriber.html#t:cb_state/0","title":"brod_topic_subscriber.cb_state/0","type":"type"},{"doc":"","ref":"brod_topic_subscriber.html#t:committed_offsets/0","title":"brod_topic_subscriber.committed_offsets/0","type":"type"},{"doc":"","ref":"brod_topic_subscriber.html#t:consumer/0","title":"brod_topic_subscriber.consumer/0","type":"type"},{"doc":"","ref":"brod_topic_subscriber.html#t:state/0","title":"brod_topic_subscriber.state/0","type":"type"},{"doc":"","ref":"brod_topic_subscriber.html#t:topic_subscriber_config/0","title":"brod_topic_subscriber.topic_subscriber_config/0","type":"type"}]